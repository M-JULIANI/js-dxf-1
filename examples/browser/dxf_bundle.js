require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nil.js":3,"./parse.js":4,"./stringify.js":8,"./v1.js":9,"./v3.js":10,"./v4.js":12,"./v5.js":13,"./validate.js":14,"./version.js":15}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
},{"./validate.js":14}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
},{"./validate.js":14}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;
},{"./rng.js":6,"./stringify.js":8}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./md5.js":2,"./v35.js":11}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./parse.js":4,"./stringify.js":8}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./rng.js":6,"./stringify.js":8}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./sha1.js":7,"./v35.js":11}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
},{"./regex.js":5}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;
},{"./validate.js":14}],16:[function(require,module,exports){
const handleSeed = require('./handleSeed.js')

class Arc
{
    /**
     * @param {number} x1 - Center x
     * @param {number} y1 - Center y
     * @param {number} r - radius
     * @param {number} startAngle - degree
     * @param {number} endAngle - degree
     */
    constructor(x1, y1, r, startAngle, endAngle)
    {
        this.x1 = x1;
        this.y1 = y1;
        this.r = r;
        this.startAngle = startAngle;
        this.endAngle = endAngle;
        
    }

    toDxfString()
    {
        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm
        let s = `0\nARC\n`;
        s += `5\n${handleSeed()}\n`;
        s += `8\n${this.layer.name}\n`;
        s += `10\n${this.x1}\n20\n${this.y1}\n30\n0\n`;
        s += `40\n${this.r}\n50\n${this.startAngle}\n51\n${this.endAngle}\n`;
        return s;
    }
}

module.exports = Arc;

},{"./handleSeed.js":34}],17:[function(require,module,exports){
const Entity = require('./Entity')
const Row = require('./Row')
/**
 * http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-8663262B-222C-414D-B133-4A8506A27C18
 */
class Circle extends Entity
{
    /**
     * @param {number} x1 - Center x
     * @param {number} y1 - Center y
     * @param {number} r - radius
     */
    constructor(x1, y1, r)
    {
        super({ entityType: 'CIRCLE', subclassMarker: 'AcDbCircle' })
        this.x1 = x1
        this.y1 = y1
        this.r = r
        
    }

    toDxfRows() {
        return [
            new Row('10', this.x1),
            new Row('20', this.y1),
            new Row('30', 0),
            new Row('40', this.r)
        ]
    }
}

module.exports = Circle
},{"./Entity":21,"./Row":32}],18:[function(require,module,exports){
// ToDo: Compress whitespaces
const defaultDxfBlocks = [
  '  0',
  'SECTION',
  '  2',
  'BLOCKS',
  '  0',
  'BLOCK',
  '  5',
  '57',
  '330',
  '56',
  '100',
  'AcDbEntity',
  '  8',
  '0',
  '100',
  'AcDbBlockBegin',
  '  2',
  '*Model_Space',
  ' 70',
  '     0',
  ' 10',
  '0.0',
  ' 20',
  '0.0',
  ' 30',
  '0.0',
  '  3',
  '*Model_Space',
  '  1',
  '',
  '  0',
  'ENDBLK',
  '  5',
  '58',
  '330',
  '56',
  '100',
  'AcDbEntity',
  '  8',
  '0',
  '100',
  'AcDbBlockEnd',
  '  0',
  'BLOCK',
  '  5',
  '53',
  '330',
  '52',
  '100',
  'AcDbEntity',
  ' 67',
  '     1',
  '  8',
  '0',
  '100',
  'AcDbBlockBegin',
  '  2',
  '*Paper_Space',
  ' 70',
  '     0',
  ' 10',
  '0.0',
  ' 20',
  '0.0',
  ' 30',
  '0.0',
  '  3',
  '*Paper_Space',
  '  1',
  '',
  '  0',
  'ENDBLK',
  '  5',
  '54',
  '330',
  '52',
  '100',
  'AcDbEntity',
  ' 67',
  '     1',
  '  8',
  '0',
  '100',
  'AcDbBlockEnd',
  '  0',
  'ENDSEC',
]

module.exports = defaultDxfBlocks

},{}],19:[function(require,module,exports){
// ToDo: Reduce to Minimal set (and test with various viewers)
// ToDo: Compress whitespaces

const defaultDictionary = [
  '  0',
  'SECTION',
  '  2',
  'OBJECTS',
  '  0',
  'DICTIONARY',
  '  5',
  '44',
  '330',
  '0',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'ACAD_DETAILVIEWSTYLE',
  '350',
  '11D',
  '  3',
  'ACAD_GROUP',
  '350',
  '45',
  '  3',
  'ACAD_LAYOUT',
  '350',
  '51',
  '  3',
  'ACAD_MATERIAL',
  '350',
  '7A',
  '  3',
  'ACAD_MLEADERSTYLE',
  '350',
  'A2',
  '  3',
  'ACAD_MLINESTYLE',
  '350',
  '4E',
  '  3',
  'ACAD_PLOTSETTINGS',
  '350',
  '50',
  '  3',
  'ACAD_PLOTSTYLENAME',
  '350',
  '46',
  '  3',
  'ACAD_SCALELIST',
  '350',
  '7E',
  '  3',
  'ACAD_SECTIONVIEWSTYLE',
  '350',
  '11E',
  '  3',
  'ACAD_TABLESTYLE',
  '350',
  'A0',
  '  3',
  'ACAD_VISUALSTYLE',
  '350',
  '61',
  '  3',
  'ACDB_RECOMPOSE_DATA',
  '350',
  '11A',
  '  3',
  'AcDbVariableDictionary',
  '350',
  '116',
  '  0',
  'DICTIONARY',
  '  5',
  '11D',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  0',
  'DICTIONARY',
  '  5',
  '45',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  0',
  'DICTIONARY',
  '  5',
  '51',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'Layout1',
  '350',
  '55',
  '  3',
  'Model',
  '350',
  '59',
  '  0',
  'DICTIONARY',
  '  5',
  '7A',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'ByBlock',
  '350',
  '7C',
  '  3',
  'ByLayer',
  '350',
  '7B',
  '  3',
  'Global',
  '350',
  '7D',
  '  0',
  'DICTIONARY',
  '  5',
  'A2',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'Standard',
  '350',
  'A3',
  '  0',
  'DICTIONARY',
  '  5',
  '4E',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'Standard',
  '350',
  '4F',
  '  0',
  'DICTIONARY',
  '  5',
  '50',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  0',
  'ACDBDICTIONARYWDFLT',
  '  5',
  '46',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'Normal',
  '350',
  '47',
  '100',
  'AcDbDictionaryWithDefault',
  '340',
  '47',
  '  0',
  'DICTIONARY',
  '  5',
  '7E',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'A0',
  '350',
  '7F',
  '  3',
  'A1',
  '350',
  '80',
  '  3',
  'A2',
  '350',
  '81',
  '  3',
  'A3',
  '350',
  '82',
  '  3',
  'A4',
  '350',
  '83',
  '  3',
  'A5',
  '350',
  '84',
  '  3',
  'A6',
  '350',
  '85',
  '  3',
  'A7',
  '350',
  '86',
  '  3',
  'A8',
  '350',
  '87',
  '  3',
  'A9',
  '350',
  '88',
  '  3',
  'B0',
  '350',
  '89',
  '  3',
  'B1',
  '350',
  '8A',
  '  3',
  'B2',
  '350',
  '8B',
  '  3',
  'B3',
  '350',
  '8C',
  '  3',
  'B4',
  '350',
  '8D',
  '  3',
  'B5',
  '350',
  '8E',
  '  3',
  'B6',
  '350',
  '8F',
  '  3',
  'B7',
  '350',
  '90',
  '  3',
  'B8',
  '350',
  '91',
  '  3',
  'B9',
  '350',
  '92',
  '  3',
  'C0',
  '350',
  '93',
  '  3',
  'C1',
  '350',
  '94',
  '  3',
  'C2',
  '350',
  '95',
  '  3',
  'C3',
  '350',
  '96',
  '  3',
  'C4',
  '350',
  '97',
  '  3',
  'C5',
  '350',
  '98',
  '  3',
  'C6',
  '350',
  '99',
  '  3',
  'C7',
  '350',
  '9A',
  '  3',
  'C8',
  '350',
  '9B',
  '  3',
  'C9',
  '350',
  '9C',
  '  3',
  'D0',
  '350',
  '9D',
  '  3',
  'D1',
  '350',
  '9E',
  '  3',
  'D2',
  '350',
  '9F',
  '  0',
  'DICTIONARY',
  '  5',
  '11E',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  0',
  'DICTIONARY',
  '  5',
  'A0',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'Standard',
  '350',
  'A1',
  '  0',
  'DICTIONARY',
  '  5',
  '61',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  '2dWireframe',
  '350',
  '66',
  '  3',
  'Basic',
  '350',
  '69',
  '  3',
  'Brighten',
  '350',
  '6D',
  '  3',
  'ColorChange',
  '350',
  '71',
  '  3',
  'Conceptual',
  '350',
  '6B',
  '  3',
  'Dim',
  '350',
  '6C',
  '  3',
  'EdgeColorOff',
  '350',
  '74',
  '  3',
  'Facepattern',
  '350',
  '70',
  '  3',
  'Flat',
  '350',
  '62',
  '  3',
  'FlatWithEdges',
  '350',
  '63',
  '  3',
  'Gouraud',
  '350',
  '64',
  '  3',
  'GouraudWithEdges',
  '350',
  '65',
  '  3',
  'Hidden',
  '350',
  '68',
  '  3',
  'JitterOff',
  '350',
  '72',
  '  3',
  'Linepattern',
  '350',
  '6F',
  '  3',
  'OverhangOff',
  '350',
  '73',
  '  3',
  'Realistic',
  '350',
  '6A',
  '  3',
  'Shaded',
  '350',
  '79',
  '  3',
  'Shaded with edges',
  '350',
  '78',
  '  3',
  'Shades of Gray',
  '350',
  '75',
  '  3',
  'Sketchy',
  '350',
  '76',
  '  3',
  'Thicken',
  '350',
  '6E',
  '  3',
  'Wireframe',
  '350',
  '67',
  '  3',
  'X-Ray',
  '350',
  '77',
  '  0',
  'XRECORD',
  '  5',
  '11A',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '        1',
  '330',
  'A1',
  '  0',
  'DICTIONARY',
  '  5',
  '116',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'CANNOSCALE',
  '350',
  '117',
  '  3',
  'CMLEADERSTYLE',
  '350',
  '11C',
  '  3',
  'CTABLESTYLE',
  '350',
  '11B',
  '  0',
  'DICTIONARY',
  '  5',
  'A6',
  '102',
  '{ACAD_REACTORS',
  '330',
  '44',
  '102',
  '}',
  '330',
  '44',
  '100',
  'AcDbDictionary',
  '281',
  '     1',
  '  3',
  'ColorSettings/BackgroundColor',
  '350',
  'A8',
  '  3',
  'ColorSettings/ColorMode',
  '350',
  'A9',
  '  3',
  'Grid/DisplayGrid00',
  '350',
  'AA',
  '  3',
  'Grid/DisplayGrid01',
  '350',
  'AB',
  '  3',
  'Grid/DisplayGrid02',
  '350',
  'AC',
  '  3',
  'Grid/DisplayGrid03',
  '350',
  'AD',
  '  3',
  'Grid/GridSpacingX00',
  '350',
  'AE',
  '  3',
  'Grid/GridSpacingX01',
  '350',
  'AF',
  '  3',
  'Grid/GridSpacingX02',
  '350',
  'B0',
  '  3',
  'Grid/GridSpacingX03',
  '350',
  'B1',
  '  3',
  'Grid/GridSpacingY00',
  '350',
  'B2',
  '  3',
  'Grid/GridSpacingY01',
  '350',
  'B3',
  '  3',
  'Grid/GridSpacingY02',
  '350',
  'B4',
  '  3',
  'Grid/GridSpacingY03',
  '350',
  'B5',
  '  3',
  'Grid/IsometricGrid00',
  '350',
  'B6',
  '  3',
  'Grid/IsometricGrid01',
  '350',
  'B7',
  '  3',
  'Grid/IsometricGrid02',
  '350',
  'B8',
  '  3',
  'Grid/IsometricGrid03',
  '350',
  'B9',
  '  3',
  'Grid/IsometricProjection00',
  '350',
  'BA',
  '  3',
  'Grid/IsometricProjection01',
  '350',
  'BB',
  '  3',
  'Grid/IsometricProjection02',
  '350',
  'BC',
  '  3',
  'Grid/IsometricProjection03',
  '350',
  'BD',
  '  3',
  'Grid/MetaGridSpacingX00',
  '350',
  'BE',
  '  3',
  'Grid/MetaGridSpacingX01',
  '350',
  'BF',
  '  3',
  'Grid/MetaGridSpacingX02',
  '350',
  'C0',
  '  3',
  'Grid/MetaGridSpacingX03',
  '350',
  'C1',
  '  3',
  'Grid/MetaGridSpacingY00',
  '350',
  'C2',
  '  3',
  'Grid/MetaGridSpacingY01',
  '350',
  'C3',
  '  3',
  'Grid/MetaGridSpacingY02',
  '350',
  'C4',
  '  3',
  'Grid/MetaGridSpacingY03',
  '350',
  'C5',
  '  3',
  'MultiPageSettings/Columns',
  '350',
  'C6',
  '  3',
  'MultiPageSettings/GlueMarginsBottom',
  '350',
  'C7',
  '  3',
  'MultiPageSettings/GlueMarginsLeft',
  '350',
  'C8',
  '  3',
  'MultiPageSettings/GlueMarginsRight',
  '350',
  'C9',
  '  3',
  'MultiPageSettings/GlueMarginsTop',
  '350',
  'CA',
  '  3',
  'MultiPageSettings/PrintCropMarks',
  '350',
  'CB',
  '  3',
  'MultiPageSettings/Rows',
  '350',
  'CC',
  '  3',
  'PageSettings/OffsetX',
  '350',
  'CD',
  '  3',
  'PageSettings/OffsetY',
  '350',
  'CE',
  '  3',
  'PageSettings/PageOrientation',
  '350',
  'CF',
  '  3',
  'PageSettings/PaperHeight',
  '350',
  'D0',
  '  3',
  'PageSettings/PaperSizeName',
  '350',
  'D1',
  '  3',
  'PageSettings/PaperWidth',
  '350',
  'D2',
  '  3',
  'PageSettings/Scale',
  '350',
  'D3',
  '  3',
  'PageSettings/ShowPaperBorders',
  '350',
  'D4',
  '  3',
  'UnitSettings/PaperUnit',
  '350',
  'D5',
  '  3',
  'ViewportCenter',
  '350',
  'D6',
  '  3',
  'ViewportHeight',
  '350',
  'D7',
  '  3',
  'ViewportWidth',
  '350',
  'D8',
  '  0',
  'LAYOUT',
  '  5',
  '55',
  '102',
  '{ACAD_REACTORS',
  '330',
  '51',
  '102',
  '}',
  '330',
  '51',
  '100',
  'AcDbPlotSettings',
  '  1',
  '',
  '  2',
  'none_device',
  '  4',
  'ISO_A4_(210.00_x_297.00_MM)',
  '  6',
  '',
  ' 40',
  '7.5',
  ' 41',
  '20.0',
  ' 42',
  '7.5',
  ' 43',
  '20.0',
  ' 44',
  '210.0',
  ' 45',
  '297.0',
  ' 46',
  '0.0',
  ' 47',
  '0.0',
  ' 48',
  '0.0',
  ' 49',
  '0.0',
  '140',
  '0.0',
  '141',
  '0.0',
  '142',
  '1.0',
  '143',
  '1.0',
  ' 70',
  '   688',
  ' 72',
  '     1',
  ' 73',
  '     1',
  ' 74',
  '     5',
  '  7',
  '',
  ' 75',
  '    16',
  ' 76',
  '     0',
  ' 77',
  '     2',
  ' 78',
  '   300',
  '147',
  '1.0',
  '148',
  '0.0',
  '149',
  '0.0',
  '100',
  'AcDbLayout',
  '  1',
  'Layout1',
  ' 70',
  '     1',
  ' 71',
  '     0',
  ' 10',
  '-20.0',
  ' 20',
  '-7.5',
  ' 11',
  '277.0',
  ' 21',
  '202.5',
  ' 12',
  '0.0',
  ' 22',
  '0.0',
  ' 32',
  '0.0',
  ' 14',
  '0.0',
  ' 24',
  '0.0',
  ' 34',
  '0.0',
  ' 15',
  '0.0',
  ' 25',
  '0.0',
  ' 35',
  '0.0',
  '146',
  '0.0',
  ' 13',
  '0.0',
  ' 23',
  '0.0',
  ' 33',
  '0.0',
  ' 16',
  '1.0',
  ' 26',
  '0.0',
  ' 36',
  '0.0',
  ' 17',
  '0.0',
  ' 27',
  '1.0',
  ' 37',
  '0.0',
  ' 76',
  '     0',
  '330',
  '52',
  '331',
  '114',
  '  0',
  'LAYOUT',
  '  5',
  '59',
  '102',
  '{ACAD_REACTORS',
  '330',
  '51',
  '102',
  '}',
  '330',
  '51',
  '100',
  'AcDbPlotSettings',
  '  1',
  '',
  '  2',
  'none_device',
  '  4',
  'Letter_(8.50_x_11.00_Inches)',
  '  6',
  '',
  ' 40',
  '6.35',
  ' 41',
  '6.35',
  ' 42',
  '6.35000508',
  ' 43',
  '6.35000508',
  ' 44',
  '215.9',
  ' 45',
  '279.4',
  ' 46',
  '0.0',
  ' 47',
  '0.0',
  ' 48',
  '0.0',
  ' 49',
  '0.0',
  '140',
  '0.0',
  '141',
  '0.0',
  '142',
  '1.0',
  '143',
  '1.0',
  ' 70',
  '  1712',
  ' 72',
  '     0',
  ' 73',
  '     0',
  ' 74',
  '     0',
  '  7',
  '',
  ' 75',
  '     0',
  ' 76',
  '     0',
  ' 77',
  '     2',
  ' 78',
  '   300',
  '147',
  '1.0',
  '148',
  '0.0',
  '149',
  '0.0',
  '100',
  'AcDbLayout',
  '  1',
  'Model',
  ' 70',
  '     1',
  ' 71',
  '     0',
  ' 10',
  '0.0',
  ' 20',
  '0.0',
  ' 11',
  '12.0',
  ' 21',
  '9.0',
  ' 12',
  '0.0',
  ' 22',
  '0.0',
  ' 32',
  '0.0',
  ' 14',
  '1.000000000000000E+20',
  ' 24',
  '1.000000000000000E+20',
  ' 34',
  '1.000000000000000E+20',
  ' 15',
  '-1.000000000000000E+20',
  ' 25',
  '-1.000000000000000E+20',
  ' 35',
  '-1.000000000000000E+20',
  '146',
  '0.0',
  ' 13',
  '0.0',
  ' 23',
  '0.0',
  ' 33',
  '0.0',
  ' 16',
  '1.0',
  ' 26',
  '0.0',
  ' 36',
  '0.0',
  ' 17',
  '0.0',
  ' 27',
  '1.0',
  ' 37',
  '0.0',
  ' 76',
  '     0',
  '330',
  '56',
  '331',
  '60',
  '  0',
  'MATERIAL',
  '  5',
  '7C',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7A',
  '102',
  '}',
  '330',
  '7A',
  '100',
  'AcDbMaterial',
  '  1',
  'ByBlock',
  ' 72',
  '     1',
  ' 94',
  '      127',
  '  0',
  'MATERIAL',
  '  5',
  '7B',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7A',
  '102',
  '}',
  '330',
  '7A',
  '100',
  'AcDbMaterial',
  '  1',
  'ByLayer',
  ' 72',
  '     1',
  ' 94',
  '      127',
  '  0',
  'MATERIAL',
  '  5',
  '7D',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7A',
  '102',
  '}',
  '330',
  '7A',
  '100',
  'AcDbMaterial',
  '  1',
  'Global',
  ' 72',
  '     1',
  ' 94',
  '      127',
  '  0',
  'MLEADERSTYLE',
  '  5',
  'A3',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A2',
  '102',
  '}',
  '330',
  'A2',
  '100',
  'AcDbMLeaderStyle',
  '179',
  '     2',
  '170',
  '     2',
  '171',
  '     1',
  '172',
  '     0',
  ' 90',
  '        2',
  ' 40',
  '0.0',
  ' 41',
  '0.0',
  '173',
  '     1',
  ' 91',
  '-1056964608',
  '340',
  '4B',
  ' 92',
  '       -2',
  '290',
  '     1',
  ' 42',
  '0.09',
  '291',
  '     1',
  ' 43',
  '0.36',
  '  3',
  'Standard',
  '341',
  '0',
  ' 44',
  '0.18',
  '300',
  '',
  '342',
  '49',
  '174',
  '     1',
  '178',
  '     6',
  '175',
  '     1',
  '176',
  '     0',
  ' 93',
  '-1056964608',
  ' 45',
  '0.18',
  '292',
  '     0',
  '297',
  '     0',
  ' 46',
  '0.18',
  '343',
  '0',
  ' 94',
  '-1056964608',
  ' 47',
  '1.0',
  ' 49',
  '1.0',
  '140',
  '1.0',
  '293',
  '     1',
  '141',
  '0.0',
  '294',
  '     1',
  '177',
  '     0',
  '142',
  '1.0',
  '295',
  '     0',
  '296',
  '     0',
  '143',
  '0.125',
  '271',
  '     0',
  '272',
  '     9',
  '273',
  '     9',
  '298',
  '     0',
  '  0',
  'MLINESTYLE',
  '  5',
  '4F',
  '102',
  '{ACAD_REACTORS',
  '330',
  '4E',
  '102',
  '}',
  '330',
  '4E',
  '100',
  'AcDbMlineStyle',
  '  2',
  'Standard',
  ' 70',
  '     0',
  '  3',
  '',
  ' 62',
  '   256',
  ' 51',
  '90.0',
  ' 52',
  '90.0',
  ' 71',
  '     2',
  ' 49',
  '0.5',
  ' 62',
  '   256',
  '  6',
  'BYLAYER',
  ' 49',
  '-0.5',
  ' 62',
  '   256',
  '  6',
  'BYLAYER',
  '  0',
  'ACDBPLACEHOLDER',
  '  5',
  '47',
  '102',
  '{ACAD_REACTORS',
  '330',
  '46',
  '102',
  '}',
  '330',
  '46',
  '  0',
  'SCALE',
  '  5',
  '7F',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:1',
  '140',
  '1.0',
  '141',
  '1.0',
  '290',
  '     1',
  '  0',
  'SCALE',
  '  5',
  '80',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:2',
  '140',
  '1.0',
  '141',
  '2.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '81',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:4',
  '140',
  '1.0',
  '141',
  '4.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '82',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:5',
  '140',
  '1.0',
  '141',
  '5.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '83',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:8',
  '140',
  '1.0',
  '141',
  '8.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '84',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:10',
  '140',
  '1.0',
  '141',
  '10.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '85',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:16',
  '140',
  '1.0',
  '141',
  '16.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '86',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:20',
  '140',
  '1.0',
  '141',
  '20.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '87',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:30',
  '140',
  '1.0',
  '141',
  '30.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '88',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:40',
  '140',
  '1.0',
  '141',
  '40.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '89',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:50',
  '140',
  '1.0',
  '141',
  '50.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '8A',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '1:100',
  '140',
  '1.0',
  '141',
  '100.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '8B',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '2:1',
  '140',
  '2.0',
  '141',
  '1.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '8C',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '4:1',
  '140',
  '4.0',
  '141',
  '1.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '8D',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '8:1',
  '140',
  '8.0',
  '141',
  '1.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '8E',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '10:1',
  '140',
  '10.0',
  '141',
  '1.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '8F',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  '100:1',
  '140',
  '100.0',
  '141',
  '1.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '90',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/128\" = 1\'-0\"",
  '140',
  '0.0078125',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '91',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/64\" = 1'-0\" ",
  '140',
  '0.015625',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '92',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/32\" = 1'-0\" ",
  '140',
  '0.03125',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '93',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/16\" = 1'-0\" ",
  '140',
  '0.0625',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '94',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '   0',
  '300',
  "3/32\" = 1'-0\" ",
  '140',
  '0.09375',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '95',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/8\" = 1'-0\" ",
  '140',
  '0.125',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '96',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "3/16\" = 1'-0\" ",
  '140',
  '0.1875',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '97',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/4\" = 1'-0\" ",
  '140',
  '0.25',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '98',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "3/8\" = 1'-0\" ",
  '140',
  '0.375',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '99',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1/2\" = 1'-0\" ",
  '140',
  '0.5',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '9A',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "3/4\" = 1'-0\" ",
  '140',
  '0.75',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '9B',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1\" = 1'-0\" ",
  '140',
  '1.0',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '9C',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1-1/2\" = 1'-0\" ",
  '140',
  '1.5',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '9D',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "3\" = 1'-0\" ",
  '140',
  '3.0',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '9E',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "6\" = 1'-0\" ",
  '140',
  '6.0',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'SCALE',
  '  5',
  '9F',
  '102',
  '{ACAD_REACTORS',
  '330',
  '7E',
  '102',
  '}',
  '330',
  '7E',
  '100',
  'AcDbScale',
  ' 70',
  '     0',
  '300',
  "1'-0\" = 1'-0\" ",
  '140',
  '12.0',
  '141',
  '12.0',
  '290',
  '     0',
  '  0',
  'TABLESTYLE',
  '  5',
  'A1',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A0',
  '102',
  '}',
  '102',
  '{ACAD_XDICTIONARY',
  '360',
  '118',
  '102',
  '}',
  '330',
  'A0',
  '100',
  'AcDbTableStyle',
  '  3',
  'Standard',
  ' 70',
  '     0',
  ' 71',
  '     0',
  ' 40',
  '0.06',
  ' 41',
  '0.06',
  '280',
  '     0',
  '281',
  '     0',
  '  7',
  'Standard',
  '140',
  '0.18',
  '170',
  '     2',
  ' 62',
  '     0',
  ' 63',
  '   257',
  '283',
  '     0',
  ' 90',
  '        4',
  ' 91',
  '        0',
  '  1',
  '',
  '274',
  '    -2',
  '284',
  '     1',
  ' 64',
  '     0',
  '275',
  '    -2',
  '285',
  '     1',
  ' 65',
  '     0',
  '276',
  '    -2',
  '286',
  '     1',
  ' 66',
  '     0',
  '277',
  '    -2',
  '287',
  '     1',
  ' 67',
  '     0',
  '278',
  '    -2',
  '288',
  '     1',
  ' 68',
  '     0',
  '279',
  '    -2',
  '289',
  '     1',
  ' 69',
  '     0',
  '  7',
  'Standard',
  '140',
  '0.25',
  '170',
  '     5',
  ' 62',
  '     0',
  ' 63',
  '   257',
  '283',
  '     0',
  ' 90',
  '        4',
  ' 91',
  '        0',
  '  1',
  '',
  '274',
  '    -2',
  '284',
  '     1',
  ' 64',
  '     0',
  '275',
  '    -2',
  '285',
  '     1',
  ' 65',
  '     0',
  '276',
  '    -2',
  '286',
  '     1',
  ' 66',
  '     0',
  '277',
  '    -2',
  '287',
  '     1',
  ' 67',
  '     0',
  '278',
  '    -2',
  '288',
  '     1',
  ' 68',
  '     0',
  '279',
  '    -2',
  '289',
  '     1',
  ' 69',
  '     0',
  '  7',
  'Standard',
  '140',
  '0.18',
  '170',
  '     5',
  ' 62',
  '     0',
  ' 63',
  '   257',
  '283',
  '     0',
  ' 90',
  '        4',
  ' 91',
  '        0',
  '  1',
  '',
  '274',
  '    -2',
  '284',
  '     1',
  ' 64',
  '     0',
  '275',
  '    -2',
  '285',
  '     1',
  ' 65',
  '     0',
  '276',
  '    -2',
  '286',
  '     1',
  ' 66',
  '     0',
  '277',
  '    -2',
  '287',
  '     1',
  ' 67',
  '     0',
  '278',
  '    -2',
  '288',
  '     1',
  ' 68',
  '     0',
  '279',
  '    -2',
  '289',
  '     1',
  ' 69',
  '     0',
  '  0',
  'VISUALSTYLE',
  '  5',
  '66',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  '2dWireframe',
  ' 70',
  '     4',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '69',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Basic',
  ' 70',
  '     7',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '6D',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Brighten',
  ' 70',
  '    12',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '50.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '71',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'ColorChange',
  ' 70',
  '    16',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     8',
  '420',
  '  8421504',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     8',
  '420',
  '  8421504',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '6B',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Conceptual',
  ' 70',
  '     9',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '179.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '6C',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Dim',
  ' 70',
  '    11',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '-50.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '74',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'EdgeColorOff',
  ' 70',
  '    22',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 40',
  '0.6',
  '176',
  '     0',
  ' 40',
  '30.0',
  '176',
  '     0',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        4',
  '176',
  '     0',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 62',
  '   257',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        8',
  '176',
  '     2',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        6',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 90',
  '        5',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 40',
  '0.0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     1',
  '176',
  '     0',
  '290',
  '     1',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 40',
  '0.0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '        3',
  '176',
  '     0',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  '  0',
  'VISUALSTYLE',
  '  5',
  '70',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Facepattern',
  ' 70',
  '    15',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '62',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Flat',
  ' 70',
  '     0',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       13',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '63',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'FlatWithEdges',
  ' 70',
  '     1',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       13',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '64',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Gouraud',
  ' 70',
  '     2',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       13',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '65',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'GouraudWithEdges',
  ' 70',
  '     3',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       13',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '68',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Hidden',
  ' 70',
  '     6',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '40.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '72',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'JitterOff',
  ' 70',
  '    20',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 40',
  '0.6',
  '176',
  '     0',
  ' 40',
  '30.0',
  '176',
  '     0',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        4',
  '176',
  '     0',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 62',
  '   257',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '       10',
  '176',
  '     2',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        6',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 90',
  '        5',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 40',
  '0.0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     1',
  '176',
  '     0',
  '290',
  '     1',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 40',
  '0.0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '        3',
  '176',
  '     0',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  '  0',
  'VISUALSTYLE',
  '  5',
  '6F',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Linepattern',
  ' 70',
  '    14',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        7',
  '176',
  '     1',
  ' 90',
  '        7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '73',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'OverhangOff',
  ' 70',
  '    21',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 40',
  '0.6',
  '176',
  '     0',
  ' 40',
  '30.0',
  '176',
  '     0',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        4',
  '176',
  '     0',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 62',
  '   257',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        9',
  '176',
  '     2',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 90',
  '        6',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  ' 62',
  '     7',
  '176',
  '     0',
  ' 90',
  '        5',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '        1',
  '176',
  '     0',
  ' 40',
  '0.0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     1',
  '176',
  '     0',
  '290',
  '     1',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 40',
  '0.0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        0',
  '176',
  '     0',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '        3',
  '176',
  '     0',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 90',
  '       50',
  '176',
  '     0',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     0',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     0',
  '290',
  '     0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  '  0',
  'VISUALSTYLE',
  '  5',
  '6A',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Realistic',
  ' 70',
  '     8',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       13',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '79',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Shaded',
  ' 70',
  '    27',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     8',
  '420',
  '  7895160',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '78',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Shaded with edges',
  ' 70',
  '    26',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '       10',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '75',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Shades of Gray',
  ' 70',
  '    23',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '40.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '76',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Sketchy',
  ' 70',
  '    24',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '40.0',
  '176',
  '     1',
  ' 90',
  '       11',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '6E',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Thicken',
  ' 70',
  '    13',
  '177',
  '     3',
  '291',
  '     1',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '       12',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        5',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '67',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'Wireframe',
  ' 70',
  '     5',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 40',
  '0.6',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        4',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'VISUALSTYLE',
  '  5',
  '77',
  '102',
  '{ACAD_REACTORS',
  '330',
  '61',
  '102',
  '}',
  '330',
  '61',
  '100',
  'AcDbVisualStyle',
  '  2',
  'X-Ray',
  ' 70',
  '    25',
  '177',
  '     3',
  '291',
  '     0',
  ' 70',
  '    58',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '0.5',
  '176',
  '     1',
  ' 40',
  '30.0',
  '176',
  '     1',
  ' 62',
  '     7',
  '420',
  ' 16777215',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 62',
  '   257',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        8',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        1',
  '176',
  '     1',
  ' 90',
  '        6',
  '176',
  '     1',
  ' 90',
  '        2',
  '176',
  '     1',
  ' 62',
  '     7',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       13',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     1',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 40',
  '0.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 90',
  '        0',
  '176',
  '     1',
  ' 62',
  '    18',
  '420',
  '        0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '        3',
  '176',
  '     1',
  ' 62',
  '     5',
  '420',
  '      255',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 90',
  '       50',
  '176',
  '     1',
  ' 62',
  '   256',
  '176',
  '     0',
  ' 40',
  '1.0',
  '176',
  '     0',
  ' 90',
  '        2',
  '176',
  '     1',
  '  1',
  'strokes_ogs.tif',
  '176',
  '     1',
  '290',
  '     0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  ' 40',
  '1.0',
  '176',
  '     1',
  '  0',
  'DICTIONARYVAR',
  '  5',
  '117',
  '102',
  '{ACAD_REACTORS',
  '330',
  '116',
  '102',
  '}',
  '330',
  '116',
  '100',
  'DictionaryVariables',
  '280',
  '     0',
  '  1',
  '1:1',
  '  0',
  'DICTIONARYVAR',
  '  5',
  '11C',
  '102',
  '{ACAD_REACTORS',
  '330',
  '116',
  '102',
  '}',
  '330',
  '116',
  '100',
  'DictionaryVariables',
  '280',
  '     0',
  '  1',
  'Standard',
  '  0',
  'DICTIONARYVAR',
  '  5',
  '11B',
  '102',
  '{ACAD_REACTORS',
  '330',
  '116',
  '102',
  '}',
  '330',
  '116',
  '100',
  'DictionaryVariables',
  '280',
  '     0',
  '  1',
  'Standard',
  '  0',
  'XRECORD',
  '  5',
  'A8',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  '#ffffff',
  '  0',
  'XRECORD',
  '  5',
  'A9',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'FullColor',
  '  0',
  'XRECORD',
  '  5',
  'AA',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     1',
  '  0',
  'XRECORD',
  '  5',
  'AB',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     1',
  '  0',
  'XRECORD',
  '  5',
  'AC',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     1',
  '  0',
  'XRECORD',
  '  5',
  'AD',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     1',
  '  0',
  'XRECORD',
  '  5',
  'AE',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'AF',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B0',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B1',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B2',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B3',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B4',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B5',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'B6',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     0',
  '  0',
  'XRECORD',
  '  5',
  'B7',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     0',
  '  0',
  'XRECORD',
  '  5',
  'B8',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     0',
  '  0',
  'XRECORD',
  '  5',
  'B9',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     0',
  '  0',
  'XRECORD',
  '  5',
  'BA',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '     4097',
  '  0',
  'XRECORD',
  '  5',
  'BB',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '     4097',
  '  0',
  'XRECORD',
  '  5',
  'BC',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '     4097',
  '  0',
  'XRECORD',
  '  5',
  'BD',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '     4097',
  '  0',
  'XRECORD',
  '  5',
  'BE',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'BF',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C0',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C1',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C2',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C3',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C4',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C5',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'auto',
  '  0',
  'XRECORD',
  '  5',
  'C6',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '        1',
  '  0',
  'XRECORD',
  '  5',
  'C7',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '10.0',
  '  0',
  'XRECORD',
  '  5',
  'C8',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '10.0',
  '  0',
  'XRECORD',
  '  5',
  'C9',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '10.0',
  '  0',
  'XRECORD',
  '  5',
  'CA',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '10.0',
  '  0',
  'XRECORD',
  '  5',
  'CB',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     0',
  '  0',
  'XRECORD',
  '  5',
  'CC',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '        1',
  '  0',
  'XRECORD',
  '  5',
  'CD',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '0.0',
  '  0',
  'XRECORD',
  '  5',
  'CE',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '0.0',
  '  0',
  'XRECORD',
  '  5',
  'CF',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'Portrait',
  '  0',
  'XRECORD',
  '  5',
  'D0',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '297.0',
  '  0',
  'XRECORD',
  '  5',
  'D1',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  'ISO A4',
  '  0',
  'XRECORD',
  '  5',
  'D2',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '210.0',
  '  0',
  'XRECORD',
  '  5',
  'D3',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  '1:1',
  '  0',
  'XRECORD',
  '  5',
  'D4',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '290',
  '     1',
  '  0',
  'XRECORD',
  '  5',
  'A7',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '1000',
  '3.17.1',
  '  0',
  'XRECORD',
  '  5',
  'D5',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 90',
  '        4',
  '  0',
  'XRECORD',
  '  5',
  'D6',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  '  0',
  'XRECORD',
  '  5',
  'D7',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '72.3',
  '  0',
  'XRECORD',
  '  5',
  'D8',
  '102',
  '{ACAD_REACTORS',
  '330',
  'A6',
  '102',
  '}',
  '330',
  'A6',
  '100',
  'AcDbXrecord',
  '280',
  '     1',
  ' 40',
  '149.8',
  '  0',
  'DICTIONARY',
  '  5',
  '118',
  '330',
  'A1',
  '100',
  'AcDbDictionary',
  '280',
  '     1',
  '281',
  '     1',
  '  3',
  'ACAD_ROUNDTRIP_2008_TABLESTYLE_CELLSTYLEMAP',
  '360',
  '119',
  '  0',
  'CELLSTYLEMAP',
  '  5',
  '119',
  '102',
  '{ACAD_REACTORS',
  '330',
  '118',
  '102',
  '}',
  '330',
  '118',
  '100',
  'AcDbCellStyleMap',
  ' 90',
  '        3',
  '300',
  'CELLSTYLE',
  '  1',
  'TABLEFORMAT_BEGIN',
  ' 90',
  '        5',
  '170',
  '     1',
  ' 91',
  '        0',
  ' 92',
  '    32768',
  ' 62',
  '   257',
  ' 93',
  '        1',
  '300',
  'CONTENTFORMAT',
  '  1',
  'CONTENTFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        0',
  ' 92',
  '        4',
  ' 93',
  '        0',
  '300',
  '',
  ' 40',
  '0.0',
  '140',
  '1.0',
  ' 94',
  '        5',
  ' 62',
  '     0',
  '340',
  '49',
  '144',
  '0.25',
  '309',
  'CONTENTFORMAT_END',
  '171',
  '     1',
  '301',
  'MARGIN',
  '  1',
  'CELLMARGIN_BEGIN',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  '309',
  'CELLMARGIN_END',
  ' 94',
  '        6',
  ' 95',
  '        1',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        2',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        4',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        8',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '       16',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '       32',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  '309',
  'TABLEFORMAT_END',
  '  1',
  'CELLSTYLE_BEGIN',
  ' 90',
  '        1',
  ' 91',
  '        1',
  '300',
  '_TITLE',
  '309',
  'CELLSTYLE_END',
  '300',
  'CELLSTYLE',
  '  1',
  'TABLEFORMAT_BEGIN',
  ' 90',
  '        5',
  '170',
  '     1',
  ' 91',
  '        0',
  ' 92',
  '        0',
  ' 62',
  '   257',
  ' 93',
  '        1',
  '300',
  'CONTENTFORMAT',
  '  1',
  'CONTENTFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        0',
  ' 92',
  '        4',
  ' 93',
  '        0',
  '300',
  '',
  ' 40',
  '0.0',
  '140',
  '1.0',
  ' 94',
  '        5',
  ' 62',
  '     0',
  '340',
  '49',
  '144',
  '0.18',
  '309',
  'CONTENTFORMAT_END',
  '171',
  '     1',
  '301',
  'MARGIN',
  '  1',
  'CELLMARGIN_BEGIN',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  '309',
  'CELLMARGIN_END',
  ' 94',
  '        6',
  ' 95',
  '        1',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        2',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        4',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        8',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '       16',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '       32',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  '309',
  'TABLEFORMAT_END',
  '  1',
  'CELLSTYLE_BEGIN',
  ' 90',
  '        2',
  ' 91',
  '        1',
  '300',
  '_HEADER',
  '309',
  'CELLSTYLE_END',
  '300',
  'CELLSTYLE',
  '  1',
  'TABLEFORMAT_BEGIN',
  ' 90',
  '        5',
  '170',
  '     1',
  ' 91',
  '        0',
  ' 92',
  '        0',
  ' 62',
  '   257',
  ' 93',
  '        1',
  '300',
  'CONTENTFORMAT',
  '  1',
  'CONTENTFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        0',
  ' 92',
  '        4',
  ' 93',
  '        0',
  '300',
  '',
  ' 40',
  '0.0',
  '140',
  '1.0',
  ' 94',
  '        2',
  ' 62',
  '     0',
  '340',
  '49',
  '144',
  '0.18',
  '309',
  'CONTENTFORMAT_END',
  '171',
  '     1',
  '301',
  'MARGIN',
  '  1',
  'CELLMARGIN_BEGIN',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  ' 40',
  '0.06',
  '309',
  'CELLMARGIN_END',
  ' 94',
  '        6',
  ' 95',
  '        1',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        2',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        4',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '        8',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '       16',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  ' 95',
  '       32',
  '302',
  'GRIDFORMAT',
  '  1',
  'GRIDFORMAT_BEGIN',
  ' 90',
  '        0',
  ' 91',
  '        1',
  ' 62',
  '     0',
  ' 92',
  '       -2',
  '340',
  '4B',
  ' 93',
  '        0',
  ' 40',
  '0.045',
  '309',
  'GRIDFORMAT_END',
  '309',
  'TABLEFORMAT_END',
  '  1',
  'CELLSTYLE_BEGIN',
  ' 90',
  '        3',
  ' 91',
  '        2',
  '300',
  '_DATA',
  '309',
  'CELLSTYLE_END',
  '  0',
  'ENDSEC',
]

module.exports = defaultDictionary

},{}],20:[function(require,module,exports){
const Layer = require('./Layer')
const Row = require('./Row')
const Drawing = require('./Drawing')
const LineType = require('./LineType');
const H = require('./Helpers')
const handleSeed = require('./handleSeed.js')

// http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-8CE7CC87-27BD-4490-89DA-C21F516415A9
function generateVportTable () {

  const output = [] // Row[]

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'VPORT'))
  output.push(new Row('5', '40'))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '1'))

  output.push(new Row('0', 'VPORT'))
  output.push(new Row('5', '60'))
  output.push(new Row('330', '40'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbViewportTableRecord'))
  output.push(new Row('2', '*Active'))
  output.push(new Row('70', '0'))
  output.push(new Row('10', '0.0'))
  output.push(new Row('20', '0.0'))
  output.push(new Row('11', '1.0'))
  output.push(new Row('21', '1.0'))
  output.push(new Row('12', '69.9'))
  output.push(new Row('22', '31.5'))
  output.push(new Row('13', '0.0'))
  output.push(new Row('23', '0.0'))
  output.push(new Row('14', '0.5'))
  output.push(new Row('24', '0.5'))
  output.push(new Row('15', '0.5'))
  output.push(new Row('25', '0.5'))
  output.push(new Row('16', '0.0'))
  output.push(new Row('26', '0.0'))
  output.push(new Row('36', '1.0'))
  output.push(new Row('17', '0.0'))
  output.push(new Row('27', '0.0'))
  output.push(new Row('37', '0.0'))
  output.push(new Row('40', '72.3'))
  output.push(new Row('41', '2.071922544951591'))
  output.push(new Row('42', '50.0'))
  output.push(new Row('43', '0.0'))
  output.push(new Row('44', '0.0'))
  output.push(new Row('50', '0.0'))
  output.push(new Row('51', '0.0'))
  output.push(new Row('71', '0'))
  output.push(new Row('72', '100'))
  output.push(new Row('73', '1'))
  output.push(new Row('74', '3'))
  output.push(new Row('75', '0'))
  output.push(new Row('76', '0'))
  output.push(new Row('77', '0'))
  output.push(new Row('78', '0'))
  output.push(new Row('281', '0'))
  output.push(new Row('65', '1'))
  output.push(new Row('110', '0.0'))
  output.push(new Row('120', '0.0'))
  output.push(new Row('130', '0.0'))
  output.push(new Row('111', '1,0'))
  output.push(new Row('121', '0.0'))
  output.push(new Row('131', '0.0'))
  output.push(new Row('112', '0.0'))
  output.push(new Row('122', '1.0'))
  output.push(new Row('132', '0.0'))
  output.push(new Row('79', '0'))
  output.push(new Row('146', '0.0'))
  output.push(new Row('348', '66'))
  output.push(new Row('60', '3'))
  output.push(new Row('61', '5'))
  output.push(new Row('292', '1'))
  output.push(new Row('282', '1'))
  output.push(new Row('141', '0.0'))
  output.push(new Row('142', '0.0'))
  output.push(new Row('63', '250'))
  output.push(new Row('361', 'A4'))
  output.push(new Row('0', 'ENDTAB'))

  return output
}
function generateLayerTable (_layers) {
  const output = [] // Row[]

  const layerNames = Object.keys(_layers)

  const layers = _layers

  const layersWithout0 = layerNames.filter(layerName => layerName !== '0')

  const layer0missing = layerNames.filter(layerName => layerName === '0').length === 0
  if (layer0missing) {
    layers['0'] = new Layer('0',7, 'CONTINUOUS') //ToDo:Connect to constants?
  }

  const sortedLayers = [
    '0',  // Ensure mandatory 0 is first layer
    ...layersWithout0,
  ]

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'LAYER'))
  output.push(new Row('5', '3B'))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '1'))

  sortedLayers.forEach(layerName => {
    const layer = _layers[layerName]
    const rows = layer.toDxfRows()
    output.push(...rows)
  })
  output.push(new Row('0', 'ENDTAB'))
  return output
}

function generateUcsTable () {
  const output = []

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'UCS'))
  output.push(new Row('5', '3F'))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '0'))
  output.push(new Row('0', 'ENDTAB'))

  return output
}
function generateViewTable () {
  const output = []

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'VIEW'))
  output.push(new Row('5', '3E'))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '0'))

  output.push(new Row('0', 'ENDTAB'))

  return output
}

function generateStyleTable () {

  const output = []

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'STYLE'))
  output.push(new Row('5', '3C'))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '12'))

  output.push(new Row('0', 'STYLE'))
  output.push(new Row('5', '49'))
  output.push(new Row('330', '3C'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbTextStyleTableRecord'))
  output.push(new Row('2', 'Standard'))
  output.push(new Row('70', '0'))
  output.push(new Row('40', '0.0'))
  output.push(new Row('41', '1.0'))
  output.push(new Row('50', '0.0'))
  output.push(new Row('71', '0'))
  output.push(new Row('42', '0.2'))
  output.push(new Row('3', 'txt'))
  output.push(new Row('4', ''))
  output.push(new Row('0', 'ENDTAB'))

  return output
}
function generateBlockRecordTable () {

  const output = []

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'BLOCK_RECORD'))
  output.push(new Row('5', '3A'))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '0'))

  output.push(new Row('0', 'BLOCK_RECORD'))
  output.push(new Row('5', '56'))
  output.push(new Row('330', '3A'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbBlockTableRecord'))
  output.push(new Row('2', '*Model_Space'))
  output.push(new Row('340', '59'))
  output.push(new Row('70', '0'))
  output.push(new Row('280', '1'))
  output.push(new Row('281', '0'))

  output.push(new Row('0', 'BLOCK_RECORD'))
  output.push(new Row('5', '52'))
  output.push(new Row('330', '3A'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbBlockTableRecord'))
  output.push(new Row('2', '*Paper_Space'))
  output.push(new Row('340', '55'))
  output.push(new Row('70', '0'))
  output.push(new Row('280', '1'))
  output.push(new Row('281', '0'))

  output.push(new Row('0', 'ENDTAB'))

  return output
}

function generateLtypeTable () {


  const output = []

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'LTYPE'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '48'))
  
  // By Block
  output.push(new Row('0', 'LTYPE'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '3D'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbLinetypeTableRecord'))
  output.push(new Row('2', 'ByBlock'))
  output.push(new Row('70', '0'))
  output.push(new Row('3', ''))
  output.push(new Row('72', '65'))
  output.push(new Row('73', '0'))
  output.push(new Row('40', '0'))
  
   // By Layer
  output.push(new Row('0', 'LTYPE'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '3D'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbLinetypeTableRecord'))
  output.push(new Row('2', 'ByLayer'))
  output.push(new Row('70', '0'))
  output.push(new Row('3', ''))
  output.push(new Row('72', '65'))
  output.push(new Row('73', '0'))
  output.push(new Row('40', '0'))
  

  // Continous lines
  output.push(new Row('0', 'LTYPE'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '3D'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbLinetypeTableRecord'))
  output.push(new Row('2', 'Continuous'))
  output.push(new Row('70', '0'))
  output.push(new Row('3', 'Solid line'))
  output.push(new Row('72', '65'))
  output.push(new Row('73', '0'))
  output.push(new Row('40', '0'))
  

  /*

0
LTYPE
72
65
70
64
2
DASHED
3
_ _ _ 

73
2
40
10
49
5
49
-5
*/
  // Dashed lines
  output.push(new Row('0', 'LTYPE'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '3D'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbLinetypeTableRecord'))
  output.push(new Row('2', 'Dashed'))
  output.push(new Row('70', '0'))
  output.push(new Row('3', '_ _ _ '))
  output.push(new Row('73', '2'))
  output.push(new Row('40', '10'))
  output.push(new Row('49', '5'))
  output.push(new Row('49', '-5'))
  

  output.push(new Row('0', 'ENDTAB'))

  return {
    rows: output,
    
  }
}

function generateDimStyleTable () {

  const rows = []
  rows.push(new Row('0', 'TABLE'))
  rows.push(new Row('2', 'DIMSTYLE'))
  rows.push(new Row('5', handleSeed()))       // ToDO: Add handseed
  rows.push(new Row('330', '0'))
  rows.push(new Row('100', 'AcDbSymbolTable'))
  rows.push(new Row('70', '2'))
  rows.push(new Row('100', 'AcDbDimStyleTable'))
  

  rows.push(new Row('0', 'DIMSTYLE'))
  rows.push(new Row('105', '5E'))
  rows.push(new Row('330', '42'))
  rows.push(new Row('100', 'AcDbSymbolTableRecord'))
  rows.push(new Row('100', 'AcDbDimStyleTableRecord'))
  rows.push(new Row('2', 'Standard'))
  rows.push(new Row('70', '0'))
  rows.push(new Row('178', '0'))
  rows.push(new Row('340', '49'))
  rows.push(new Row('0', 'ENDTAB'))
  return {
    rows,
    
  }
}

function generateAppIdTable () {

  const appName = 'Online Exporter'     // ToDo: Rename

  const output = []

  output.push(new Row('0', 'TABLE'))
  output.push(new Row('2', 'APPID'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '0'))
  output.push(new Row('100', 'AcDbSymbolTable'))
  output.push(new Row('70', '0'))
  

  output.push(new Row('0', 'APPID'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '41'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbRegAppTableRecord'))
  output.push(new Row('2', 'ACAD'))
  output.push(new Row('70', 0))
  

  output.push(new Row('0', 'APPID'))
  output.push(new Row('5', handleSeed()))
  output.push(new Row('330', '41'))
  output.push(new Row('100', 'AcDbSymbolTableRecord'))
  output.push(new Row('100', 'AcDbRegAppTableRecord'))
  output.push(new Row('2', appName))
  output.push(new Row('70', 0))
  

  output.push(new Row('0', 'ENDTAB'))

  return {
    rows: output,
  }
}

function generateDefaultTables (layers, lineTypeTableRows) {
  const output = [] // Row[]
  output.push(new Row('0', 'SECTION'))
  output.push(new Row('2', 'TABLES'))
  
  output.push(...lineTypeTableRows)
  output.push(...generateVportTable())

  const layersTable = generateLayerTable(layers)
  output.push(...layersTable)

  output.push(...generateStyleTable())
  output.push(...generateBlockRecordTable())
  output.push(...generateViewTable())
  output.push(...generateUcsTable())
  const appIdTable = generateAppIdTable()
  output.push(...appIdTable.rows)
  const dimStyleTable = generateDimStyleTable()
  output.push(...dimStyleTable.rows)
  output.push(new Row('0', 'ENDSEC'))

  return {
    
    output
  }
}

module.exports = generateDefaultTables

},{"./Drawing":"Drawing","./Helpers":24,"./Layer":25,"./LineType":27,"./Row":32,"./handleSeed.js":34}],21:[function(require,module,exports){
const Row = require('./Row')
const H = require('./Helpers')
const handleSeed = require('./handleSeed.js')
/**
 * Base class representing a DXF entity
 * About the DXF ENTITIES Section: http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-7D07C886-FD1D-4A0C-A7AB-B4D21F18E484
 */

class Entity
{
    /**
     * Entity type like TEXT, LINE, CIRCLE...
     * @type string
     * @memberof Entity
     */
    entityType
    constructor({entityType, subclassMarker})
    {
        this.entityType = entityType
        this.subclassMarker = subclassMarker
    }

    toDxfString()
    {
        const rows = [  // Row[]
        new Row('0', this.entityType),
        new Row('100', 'AcDbEntity'),
        new Row('100', this.subclassMarker),
        new Row('5', handleSeed()),
        new Row('8', this.layer.name),
      ]
        rows.push(...this.toDxfRows())
        return H.generateStringFromRows(rows)
    }
}

module.exports = Entity
},{"./Helpers":24,"./Row":32,"./handleSeed.js":34}],22:[function(require,module,exports){
const handleSeed = require('./handleSeed.js')

class Face
{
    constructor(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)
    {
        this.x1 = x1;
        this.y1 = y1;
        this.z1 = z1;
        this.x2 = x2;
        this.y2 = y2;
        this.z2 = z2;
        this.x3 = x3;
        this.y3 = y3;
        this.z3 = z3;
        this.x4 = x4;
        this.y4 = y4;
        this.z4 = z4;
        
    }

    toDxfString()
    {
        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/3dface_al_u05_c.htm
        let s = `0\n3DFACE\n`;
        s += `5\n${handleSeed()}\n`;
        s += `8\n${this.layer.name}\n`;
        s += `10\n${this.x1}\n20\n${this.y1}\n30\n${this.z1}\n`;
        s += `11\n${this.x2}\n21\n${this.y2}\n31\n${this.z2}\n`;
        s += `12\n${this.x3}\n22\n${this.y3}\n32\n${this.z3}\n`;
        s += `13\n${this.x4}\n23\n${this.y4}\n33\n${this.z4}\n`;
        return s;
    }
}

module.exports = Face;

},{"./handleSeed.js":34}],23:[function(require,module,exports){
const defaultBlocks = require('./DefaultBlocks')
const defaultDictionary = require('./DefaultDictionary')
const generateDefaultTables = require('./DefaultTables')
const Row = require('./Row')
const UUID = require('uuid')
const handleSeed = require('./handleSeed.js')

// http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-A85E8E67-27CD-4C59-BE61-4DC9FADBE74A


function generateHeaderAndDefaults (layers, unit, lineTypeTableRows) {

    const output = [] // Row[]

    // Header Section ------------------------------------------------------------

    output.push(new Row('0', 'SECTION'))
    output.push(new Row('2', 'HEADER'))

    const defaultTableResult = generateDefaultTables(layers, lineTypeTableRows)
    const defaultDictionaryRows = createTypeValueRowsFromDxfData(defaultDictionary)
    const defaultBlocksRows = createTypeValueRowsFromDxfData(defaultBlocks)
    const minimalHeaders = generateMinimalHeader(unit, 'DXF Project')

    minimalHeaders.forEach(parameter => {
      output.push(new Row('9', parameter.id))
      output.push(...parameter.rows)
    })

    output.push(new Row('0', 'ENDSEC'))

    // Default classes -----------------------------------------------------------
    output.push(new Row('0', 'SECTION'))
    output.push(new Row('2', 'CLASSES'))
    output.push(new Row('0', 'ENDSEC'))


    // Default Tables ------------------------------------------------------------
    output.push(...defaultTableResult.output)

    // Default Dictionary --------------------------------------------------------
    output.push(...defaultDictionaryRows)

    // Default Blocks
    output.push(...defaultBlocksRows)

    return output
  }

class HeaderParameter {
  id
  rows = [] // : Row[]
  constructor (id, rows) {
    this.id = id
    this.rows = rows
  }
}

function generateMinimalHeader (unit, projectName) {
  const parameters = []
  parameters.push(new HeaderParameter('$ACADVER', [new Row('1', 'AC1027')])) // 2013
  parameters.push(new HeaderParameter('$ANGBASE', [new Row('50', '0')]))
  parameters.push(new HeaderParameter('$ANGDIR', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$ATTMODE', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$AUNITS', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$AUPREC', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$CECOLOR', [new Row('62', '256')])) // 0 = by block, 256 = by layer
  parameters.push(new HeaderParameter('$CELTSCALE', [new Row('40', '1')]))
  parameters.push(new HeaderParameter('$CELTYPE', [new Row('6', 'ByLayer')]))
  parameters.push(new HeaderParameter('$CELWEIGHT', [new Row('370', '-1')]))
  parameters.push(new HeaderParameter('$CEPSNTYPE', [new Row('380', '0')]))
  parameters.push(new HeaderParameter('$CHAMFERA', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$CHAMFERB', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$CHAMFERC', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$CHAMFERD', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$CLAYER', [new Row('8', '0')]))
  parameters.push(new HeaderParameter('$CMLJUST', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$CMLSCALE', [new Row('40', '1')]))
  parameters.push(new HeaderParameter('$CMLSTYLE', [new Row('2', 'Standard')]))
  parameters.push(new HeaderParameter('$CSHADOW', [new Row('280', '0')]))
  parameters.push(new HeaderParameter('$DIMADEC', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMALT', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMALTD', [new Row('70', '3')])) // metric
  parameters.push(new HeaderParameter('$DIMALTF', [new Row('40', '0.0394')]))  // 25.4 -> 0.0394
  parameters.push(new HeaderParameter('$DIMALTRND', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMALTTD', [new Row('70', '3')]))  // metric
  parameters.push(new HeaderParameter('$DIMALTTZ', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMALTU', [new Row('70', '2')]))
  parameters.push(new HeaderParameter('$DIMALTZ', [new Row('70', '2')]))
  parameters.push(new HeaderParameter('$DIMAPOST', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$DIMASO', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$DIMASSOC', [new Row('280', '2')]))
  parameters.push(new HeaderParameter('$DIMASZ', [new Row('40', '2.5')]))
  parameters.push(new HeaderParameter('$DIMATFIT', [new Row('70', '3')]))
  parameters.push(new HeaderParameter('$DIMAUNIT', [new Row('70', '3')]))  // 0 = degrees, 3 = Radians
  parameters.push(new HeaderParameter('$DIMAZIN', [new Row('70', '2')]))
  parameters.push(new HeaderParameter('$DIMBLK', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$DIMBLK1', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$DIMBLK2', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$DIMCEN', [new Row('40', '0.1')]))
  parameters.push(new HeaderParameter('$DIMCLRD', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMCLRE', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMCLRT', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMDEC', [new Row('70', '2')]))
  parameters.push(new HeaderParameter('$DIMDLE', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMDLI', [new Row('40', '0.38')]))
  parameters.push(new HeaderParameter('$DIMDSEP', [new Row('70', '46')]))
  parameters.push(new HeaderParameter('$DIMEXE', [new Row('40', '1.25')]))
  parameters.push(new HeaderParameter('$DIMEXO', [new Row('40', '0.625')]))
  parameters.push(new HeaderParameter('$DIMGAP', [new Row('40', '0.625')]))
  parameters.push(new HeaderParameter('$DIMJUST', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMLDRBLK', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$DIMLFAC', [new Row('40', '1')]))
  parameters.push(new HeaderParameter('$DIMLIM', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMLUNIT', [new Row('70', '2')]))
  parameters.push(new HeaderParameter('$DIMLWD', [new Row('70', '-3')]))   // -3 = standard, -2 = by layer
  parameters.push(new HeaderParameter('$DIMLWE', [new Row('70', '-3')]))   // -3 = standard, -2 = by layer
  parameters.push(new HeaderParameter('$DIMPOST', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$DIMRND', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMSAH', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMSCALE', [new Row('40', '1')]))
  parameters.push(new HeaderParameter('$DIMSD1', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMSD2', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMSE1', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMSE2', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMSHO', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$DIMSOXD', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMSTYLE', [new Row('2', 'Standard')]))
  parameters.push(new HeaderParameter('$DIMTAD', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMTDEC', [new Row('70', '4')]))
  parameters.push(new HeaderParameter('$DIMTFAC', [new Row('40', '1')]))
  parameters.push(new HeaderParameter('$DIMTIH', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$DIMTIX', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMTM', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMTMOVE', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMTOFL', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMTOH', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$DIMTOL', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMTOLJ', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$DIMTP', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMTSZ', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMTVP', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$DIMTXSTY', [new Row('7', 'Standard')]))
  parameters.push(new HeaderParameter('$DIMTXT', [new Row('40', '2.5')]))
  parameters.push(new HeaderParameter('$DIMTZIN', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMUPT', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$DIMZIN', [new Row('70', '8')]))
  parameters.push(new HeaderParameter('$DISPSILH', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$ELEVATION', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$ENDCAPS', [new Row('280', '0')]))
  parameters.push(new HeaderParameter('$EXTMAX', [new Row('10', '1.0E+6'), new Row('20', '1.0E+6'), new Row('30', '1.0E+6')]))
  parameters.push(new HeaderParameter('$EXTMIN', [new Row('10', '0'), new Row('20', '0'), new Row('30', '0')]))
  parameters.push(new HeaderParameter('$EXTNAMES', [new Row('290', '1')]))
  parameters.push(new HeaderParameter('$FILLETRAD', [new Row('40', '0.5')]))
  parameters.push(new HeaderParameter('$FILLMODE', [new Row('70', '1')]))
  const drawingGuid = '{' + UUID.v1() + '}'
  parameters.push(new HeaderParameter('$FINGERPRINTGUID', [new Row('2', drawingGuid)]))
  parameters.push(new HeaderParameter('$HALOGAP', [new Row('280', '0')]))
  parameters.push(new HeaderParameter('$HIDETEXT', [new Row('280', '1')])) // diff towards spec, 290 cause error in autodesk
  parameters.push(new HeaderParameter('$HYPERLINKBASE', [new Row('1', '')]))
  parameters.push(new HeaderParameter('$INDEXCTL', [new Row('280', '0')]))
  parameters.push(new HeaderParameter('$INSBASE', [new Row('10', '0'), new Row('20', '0'), new Row('30', '0')]))

  parameters.push(new HeaderParameter('$INSUNITS', [new Row('70', unit)]))  // 4 = mm, 1 = inches

  parameters.push(new HeaderParameter('$INTERFERECOLOR', [new Row('62', '1')]))
  parameters.push(new HeaderParameter('$INTERSECTIONCOLOR', [new Row('70', '257')]))
  parameters.push(new HeaderParameter('$INTERSECTIONDISPLAY', [new Row('280', '0')])) // diff towards spec, 290 cause error in autodesk
  parameters.push(new HeaderParameter('$JOINSTYLE', [new Row('280', '0')]))
  parameters.push(new HeaderParameter('$LIMCHECK', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$LIMMAX', [new Row('10', '420'), new Row('20', '297')]))  // A3 = 420 x 297
  parameters.push(new HeaderParameter('$LIMMIN', [new Row('10', '0'), new Row('20', '0')]))
  parameters.push(new HeaderParameter('$LTSCALE', [new Row('40', '1')]))
  parameters.push(new HeaderParameter('$LUNITS', [new Row('70', '2')]))
  parameters.push(new HeaderParameter('$LUPREC', [new Row('70', '4')]))
  parameters.push(new HeaderParameter('$LWDISPLAY', [new Row('290', '0')]))
  parameters.push(new HeaderParameter('$MAXACTVP', [new Row('70', '32')]))
  parameters.push(new HeaderParameter('$MEASUREMENT', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$MENU', [new Row('1', '.')]))
  parameters.push(new HeaderParameter('$MIRRTEXT', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$OBSCOLOR', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$OBSLTYPE', [new Row('280', '0')]))
  parameters.push(new HeaderParameter('$ORTHOMODE', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$PDMODE', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$PDSIZE', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$PELEVATION', [new Row('40', '0')]))
  parameters.push(new HeaderParameter('$PEXTMAX', [new Row('10', '0'), new Row('20', '0'), new Row('30', '0')]))
  parameters.push(new HeaderParameter('$PEXTMIN', [new Row('10', '0'), new Row('20', '0'), new Row('30', '0')]))
  parameters.push(new HeaderParameter('$PINSBASE', [new Row('10', '0'), new Row('20', '0'), new Row('30', '0')]))
  parameters.push(new HeaderParameter('$PLIMCHECK', [new Row('70', '0')]))
  parameters.push(new HeaderParameter('$PLIMMAX', [new Row('10', '1000'), new Row('20', '1000')]))
  parameters.push(new HeaderParameter('$PLIMMIN', [new Row('10', '-1000'), new Row('20', '-1000')]))
  parameters.push(new HeaderParameter('$PLINEGEN', [new Row('70', 0)]))
  parameters.push(new HeaderParameter('$PLINEWID', [new Row('40', 0)]))

  parameters.push(new HeaderParameter('$PROXYGRAPHICS', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$PSLTSCALE', [new Row('70', '1')]))
  parameters.push(new HeaderParameter('$PSTYLEMODE', [new Row('290', '1')])) // 1 = Uses color-dependent plot style tables in the current drawing
  parameters.push(new HeaderParameter('$PSVPSCALE', [new Row('40', 0)]))
  parameters.push(new HeaderParameter('$PUCSBASE', [new Row('2', '')]))
  parameters.push(new HeaderParameter('$PUCSNAME', [new Row('2', '')]))
  parameters.push(new HeaderParameter('$PUCSORG', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORGBACK', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORGBOTTOM', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORGFRONT', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORGLEFT', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORGRIGHT', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORGTOP', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSORTHOREF', [new Row('2', '')]))
  parameters.push(new HeaderParameter('$PUCSORTHOVIEW', [new Row('70', 0)]))
  parameters.push(new HeaderParameter('$PUCSXDIR', [new Row('10', 1), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$PUCSYDIR', [new Row('10', 0), new Row('20', 1), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$QTEXTMODE', [new Row('70', 0)]))
  parameters.push(new HeaderParameter('$REGENMODE', [new Row('70', 1)]))
  parameters.push(new HeaderParameter('$SHADEDGE', [new Row('70', 3)]))
  parameters.push(new HeaderParameter('$SHADEDIF', [new Row('70', 70)]))
  parameters.push(new HeaderParameter('$SHADOWPLANELOCATION', [new Row('40', 0)]))
  parameters.push(new HeaderParameter('$SKETCHINC', [new Row('40', 0.1)]))
  parameters.push(new HeaderParameter('$SKPOLY', [new Row('70', 0)]))
  parameters.push(new HeaderParameter('$SORTENTS', [new Row('280', 127)]))
  parameters.push(new HeaderParameter('$SPLINESEGS', [new Row('70', 8)]))
  parameters.push(new HeaderParameter('$SPLINETYPE', [new Row('70', 6)]))
  parameters.push(new HeaderParameter('$SURFTAB1', [new Row('70', 6)]))
  parameters.push(new HeaderParameter('$SURFTAB2', [new Row('70', 6)]))
  parameters.push(new HeaderParameter('$SURFTYPE', [new Row('70', 6)]))
  parameters.push(new HeaderParameter('$SURFU', [new Row('70', 6)]))
  parameters.push(new HeaderParameter('$SURFV', [new Row('70', 6)]))
  const creationDate = generateJulianDate()
  parameters.push(new HeaderParameter('$TDCREATE', [new Row('40', creationDate)]))
  parameters.push(new HeaderParameter('$TDINDWG', [new Row('40', 0)]))
  parameters.push(new HeaderParameter('$TDUCREATE', [new Row('40', creationDate)]))
  parameters.push(new HeaderParameter('$TDUPDATE', [new Row('40', creationDate)]))
  parameters.push(new HeaderParameter('$TDUSRTIMER', [new Row('40', 0)]))
  parameters.push(new HeaderParameter('$TDUUPDATE', [new Row('40', creationDate)]))
  parameters.push(new HeaderParameter('$TEXTSIZE', [new Row('40', 0.2)]))
  parameters.push(new HeaderParameter('$TEXTSTYLE', [new Row('7', 'Standard')]))
  parameters.push(new HeaderParameter('$THICKNESS', [new Row('40', 0)]))
  parameters.push(new HeaderParameter('$TILEMODE', [new Row('70', 1)]))
  parameters.push(new HeaderParameter('$TRACEWID', [new Row('40', 0.05)]))
  parameters.push(new HeaderParameter('$TREEDEPTH', [new Row('70', 3020)]))
  parameters.push(new HeaderParameter('$UCSBASE', [new Row('2', '')]))
  parameters.push(new HeaderParameter('$UCSNAME', [new Row('2', '')]))
  parameters.push(new HeaderParameter('$UCSORG', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORGBACK', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORGBOTTOM', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORGFRONT', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORGLEFT', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORGRIGHT', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORGTOP', [new Row('10', 0), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSORTHOREF', [new Row('2', '')]))
  parameters.push(new HeaderParameter('$UCSORTHOVIEW', [new Row('70', 0)]))
  parameters.push(new HeaderParameter('$UCSXDIR', [new Row('10', 1), new Row('20', 0), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UCSYDIR', [new Row('10', 0), new Row('20', 1), new Row('30', 0)]))
  parameters.push(new HeaderParameter('$UNITMODE', [new Row('70', 0)]))
  parameters.push(new HeaderParameter('$USRTIMER', [new Row('70', 0)])) // 0 = Off
  parameters.push(new HeaderParameter('$VERSIONGUID', [new Row('2', drawingGuid)]))
  parameters.push(new HeaderParameter('$VISRETAIN', [new Row('70', 1)]))
  parameters.push(new HeaderParameter('$WORLDVIEW', [new Row('70', 1)]))
  parameters.push(new HeaderParameter('$XCLIPFRAME', [new Row('280', 2)])) // diff towards spec. 290 gives error
  parameters.push(new HeaderParameter('$XEDIT', [new Row('290', 1)]))
  parameters.push(new HeaderParameter('$HANDSEED', [new Row('5', handleSeed())]))
  parameters.push(new HeaderParameter('$PROJECTNAME', [new Row('1', projectName)])) // Project name

  return parameters
}

function createTypeValueRowsFromDxfData (rows) {
  const output = [] // Row[]
  for (let i = 0; i < rows.length; i = i + 2) {
    output.push(new Row(rows[i], rows[i + 1]))
  }
  return output
}

// http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-6942BAF3-095F-4217-9F61-6931975D3A64
function generateJulianDate () {
  return new Date().getTime() / 86400000 + 2440587.5
}

module.exports = {
  generateHeaderAndDefaults
}

},{"./DefaultBlocks":18,"./DefaultDictionary":19,"./DefaultTables":20,"./Row":32,"./handleSeed.js":34,"uuid":1}],24:[function(require,module,exports){
// const Row = require('./Row')

function generateStringFromRows (rows) {  // Row[]
  const outputAsStrings = []  // string[]
  rows.forEach(item => {
    outputAsStrings.push(item.type)
    outputAsStrings.push(item.value.toString())
  })
  const s = outputAsStrings.join('\n') + '\n'
  return s
}

module.exports = {
  generateStringFromRows
}

},{}],25:[function(require,module,exports){
const Row = require('./Row')
const handleSeed = require('./handleSeed.js')

class Layer
{
    constructor(name, colorNumber, lineTypeName)
    {
        this.name = name;
        this.colorNumber = colorNumber;
        this.lineTypeName = lineTypeName;
        this.shapes = [];
        this.trueColor = -1
        
    }

    toDxfString()
    {
        const rows = this.toDxfRows()
        const outputAsStrings = []  // string[]
        rows.forEach(item => {
          outputAsStrings.push(item.type)
          outputAsStrings.push(item.value.toString())
        })
        let s = outputAsStrings.join('\n')

        s += '\n'
        return s;
    }

    toDxfRows () {  // ToDo: Merge with toDxfString?
      const output = [
        new Row('0', 'LAYER'),
        new Row('5', handleSeed()),
        new Row('330', '3B'),
        new Row('100', 'AcDbSymbolTableRecord'),
        new Row('100', 'AcDbLayerTableRecord'),
        new Row('2', this.name),
        new Row('70', 0),
        new Row('62', this.colorNumber),
      ]

      if (this.trueColor !== -1) {
        output.push(new Row('420', this.trueColor))

      }

      output.push(...[
        new Row('6', this.lineTypeName),
        new Row('370', 0),
        new Row('390', 47),
        new Row('347', '7D'),
        new Row('348', 0),
      ] )

      return output
    }


    setTrueColor(color)
    {
        this.trueColor = color;
    }

    addShape(shape)
    {
        this.shapes.push(shape);
        shape.layer = this;       // ToDo: Wont work in typescript. Extend Entities with shape.setLayer() method instead
    }

    getShapes()
    {
        return this.shapes;
    }

    shapesToDxf()
    {
        let s = '';
        for (let i = 0; i < this.shapes.length; ++i)
        {
            s += this.shapes[i].toDxfString();
        }


        return s;
    }
}

module.exports = Layer;

},{"./Row":32,"./handleSeed.js":34}],26:[function(require,module,exports){
const Entity = require('./Entity');
const Row = require('./Row')
/**
 * http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-FCEF5726-53AE-4C43-B4EA-C84EB8686A66
 */
class Line extends Entity {
    constructor(x1, y1, x2, y2) {
        super({ entityType: 'LINE', subclassMarker: 'AcDbLine' });
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    toDxfRows() {
        return [
            // new Row('62', colorIndex),
            new Row('10', this.x1),
            new Row('20', this.y1),
            new Row('30', 0),
            new Row('11', this.x2),
            new Row('21', this.y2),
            new Row('31', 0),
        ]
    }
}

module.exports = Line;

},{"./Entity":21,"./Row":32}],27:[function(require,module,exports){
const Row = require('./Row')
const handleSeed = require('./handleSeed.js')

class LineType
{
    /**
     * @param {string} name
     * @param {string} description
     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a 
     */
    constructor(name, description, elements)
    {
        this.name = name;
        this.description = description;
        this.elements = elements;
    }

    /**
     * @link https://www.autodesk.com/techpubs/autocad/acadr14/dxf/ltype_al_u05_c.htm
     */
    toDxfString()
    {
        let s = '0\nLTYPE\n';
        s += '72\n65\n';
        s += '70\n64\n';
        s += `2\n${this.name}\n`;
        s += `3\n${this.description}\n`;
        s += `73\n${this.elements.length}\n`;
        s += `40\n${this.getElementsSum()}\n`;

        for (let i = 0; i < this.elements.length; ++i)
        {
            s += `49\n${this.elements[i]}\n`;
        }

        return s;
    }

    toDxfRows()
    {
        const output = []
        output.push(new Row('0', 'LTYPE'))
        output.push(new Row('5', handleSeed()))
        output.push(new Row('330', '3D'))
        output.push(new Row('100', 'AcDbSymbolTableRecord'))
        output.push(new Row('100', 'AcDbLinetypeTableRecord'))
        output.push(new Row('2', this.name))
        output.push(new Row('70', '0'))
        output.push(new Row('3', this.description))
        output.push(new Row('72', '65'))
        output.push(new Row('73', this.elements.length))
        output.push(new Row('40', this.getElementsSum()))
        for (let i = 0; i < this.elements.length; ++i)
        {
            output.push(new Row('49', this.elements[i]))
        }
        return output
    }

    getElementsSum()
    {
        let sum = 0;
        for (let i = 0; i < this.elements.length; ++i)
        {
            sum += Math.abs(this.elements[i]);
        }

        return sum;
    }
}

module.exports = LineType;
},{"./Row":32,"./handleSeed.js":34}],28:[function(require,module,exports){
const handleSeed = require('./handleSeed.js')

class Point
{
    constructor(x, y)
    {
        this.x = x;
        this.y = y;
        
    }

    toDxfString()
    {
        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/point_al_u05_c.htm
        let s = `0\nPOINT\n`;
        s += `5\n${handleSeed()}\n`;
        s += `8\n${this.layer.name}\n`;
        s += `10\n${this.x}\n20\n${this.y}\n30\n0\n`;
        return s;
    }
}

module.exports = Point;

},{"./handleSeed.js":34}],29:[function(require,module,exports){
const handleSeed = require('./handleSeed.js')

class Polyline
{
    /**
     * @param {array} points - Array of points like [ [x1, y1], [x2, y2, bulge]... ]
     * @param {boolean} closed
     * @param {number} startWidth
     * @param {number} endWidth
     */
    constructor(points, closed = false, startWidth = 0, endWidth = 0)
    {
        this.points = points;
        this.closed = closed;
        this.startWidth = startWidth;
        this.endWidth = endWidth;
        
    }

    toDxfString()
    {
        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/polyline_dxf_06.htm
        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/vertex_dxf_06.htm
        let s = `0\nPOLYLINE\n`;
        s += `5\n${handleSeed()}\n`;
        s += `8\n${this.layer.name}\n`;
        s += `66\n1\n70\n${this.closed ? 1 : 0}\n`;
        if (this.startWidth !== 0 || this.endWidth !== 0) {
            s += `40\n${this.startWidth}\n41\n${this.endWidth}\n`;
        }

        for (let i = 0; i < this.points.length; ++i)
        {
            s += `0\nVERTEX\n`;
            s += `8\n${this.layer.name}\n`;
            s += `70\n0\n`;
            s += `10\n${this.points[i][0]}\n20\n${this.points[i][1]}\n`;
            if (this.points[i][2] !== undefined) {
                s += `42\n${this.points[i][2]}\n`;
            }
        }

        s += `0\nSEQEND\n`;
        return s;
    }
}

module.exports = Polyline;

},{"./handleSeed.js":34}],30:[function(require,module,exports){
const handleSeed = require('./handleSeed.js')

class Polyline3d
{
    /**
     * @param {array} points - Array of points like [ [x1, y1, z1], [x2, y2, z2]... ]
     */
    constructor(points)
    {
        this.points = points;
        
    }

    toDxfString()
    {
        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/polyline_dxf_06.htm
        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/vertex_dxf_06.htm
        let s = `0\nPOLYLINE\n`;
        s += `5\n${handleSeed()}\n`;
        s += `8\n${this.layer.name}\n`;
        s += `66\n1\n70\n8\n`;

        for (let i = 0; i < this.points.length; ++i)
        {
            s += `0\nVERTEX\n`;
            s += `8\n${this.layer.name}\n`;
            s += `70\n0\n`;
            s += `10\n${this.points[i][0]}\n20\n${this.points[i][1]}\n30\n${this.points[i][2]}\n`;
        }

        s += `0\nSEQEND\n`;
        return s;
    }
}

module.exports = Polyline3d;

},{"./handleSeed.js":34}],31:[function(require,module,exports){
/**
 * Class Rectangle
 * To Draw a Closed Rectangle
 * The Drawing.drawRect(x1, y1, x2, y2) draws 4 lines separated
 * I added Drawing.drawRectClosed(x1, y1, x2, y2)
 * 
 * I did'nt implement the toDxfString() function because I'll use the class Polyline
 * in the Drawing.drawRectClosed(x1, y1, x2, y2) function
 * 
 * finally it will be just a closed Polyline xD
 */
class Rectangle
{
    constructor(x1, y1, x2, y2)
    {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    getCornersPoints()
    {
        let corners = [];

        corners.push([this.x1, this.y1]);
        corners.push([this.x1, this.y2]);
        corners.push([this.x2, this.y2]);
        corners.push([this.x2, this.y1]);

        return corners;
    }

}

module.exports = Rectangle;
},{}],32:[function(require,module,exports){
// Helper structure
class Row {
  type
  value

  constructor (type, value) {
    this.type = type
    this.value = value
  }

  toString()
  {
    return `${this.type}\n${this.value}\n`
  }
}

module.exports = Row

},{}],33:[function(require,module,exports){
const Entity = require('./Entity');
const Row = require('./Row')
const H_ALIGN_CODES = ['left', 'center', 'right'];
const V_ALIGN_CODES = ['baseline', 'bottom', 'middle', 'top'];
/**
 * http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-62E5383D-8A14-47B4-BFC4-35824CAE8363
 */
class Text extends Entity {
    /**
     * @param {number} x1 - x
     * @param {number} y1 - y
     * @param {number} height - Text height
     * @param {number} rotation - Text rotation, deg
     * @param {string} value - the string itself
     * @param {string} [horizontalAlignment="left"] left | center | right
     * @param {string} [verticalAlignment="baseline"] baseline | bottom | middle | top
     */
    constructor(x1, y1, height, rotation, value, horizontalAlignment = 'left', verticalAlignment = 'baseline') {
        super({ entityType: 'TEXT', subclassMarker: 'AcDbText' });
        this.x1 = x1;
        this.y1 = y1;
        this.height = height;
        this.rotation = rotation;
        this.value = value;
        this.hAlign = horizontalAlignment;
        this.vAlign = verticalAlignment;
    }

    toDxfRows() {
        const rows = [
            new Row('1', this.value),
            new Row('40', this.height),
            new Row('50', this.rotation), // DEG
            new Row('10', this.x1), // X
            new Row('20', this.y1), // Y
            new Row('30', 0), // Z
            // 7 --> Text style name (optional, default = STANDARD)
            // They say Optional but essential for QCad to render the text correctly
            new Row('7', 'STANDARD'),
            new Row('100', 'AcDbText'),
        ]

        if (H_ALIGN_CODES.includes(this.hAlign, 1) || V_ALIGN_CODES.includes(this.vAlign, 1)) {
            rows.push(new Row('11', this.x1)), // X
                rows.push(new Row('21', this.y1)), // Y
                rows.push(new Row('31', 0)), // Y
                rows.push(new Row('72', Math.max(H_ALIGN_CODES.indexOf(this.hAlign), 0)))
            rows.push(new Row('73', Math.max(V_ALIGN_CODES.indexOf(this.vAlign), 0)))
        }

        return rows
    }
}

module.exports = Text;

},{"./Entity":21,"./Row":32}],34:[function(require,module,exports){
function handleSeed()
{
    if (typeof handleSeed.i == 'undefined')
    {
        handleSeed.i = 0
    }
    else
    {
        ++handleSeed.i
    }

    return handleSeed.i.toString(16)
}

module.exports = handleSeed
},{}],"Drawing":[function(require,module,exports){
const Layer = require('./Layer');
const LineType = require('./LineType')
const Line = require('./Line');
const Arc = require('./Arc');
const Circle = require('./Circle');
const Text = require('./Text');
const Polyline = require('./Polyline');
const Polyline3d = require('./Polyline3d');
const Face = require('./Face');
const Point = require('./Point');
const HEADER = require('./Header')
const H = require('./Helpers')
const Row = require('./Row')
const handleSeed = require('./handleSeed.js');
const Rectangle = require('./Rectangle');
class Drawing
{
    constructor()
    {
        this.layers = {}  // ToDo: replace with Map() : <string, Layer> for Typescript
        this.activeLayer = null;
        this.lineTypes = {};
        //this.handSeed = 0x11F
        this.unit = Drawing.UNITS.Millimeters

        for (let i = 0; i < Drawing.LINE_TYPES.length; ++i)
        {
            this.addLineType(Drawing.LINE_TYPES[i].name,
                             Drawing.LINE_TYPES[i].description,
                             Drawing.LINE_TYPES[i].elements);
        }

        for (let i = 0; i < Drawing.LAYERS.length; ++i)
        {
            this.addLayer(Drawing.LAYERS[i].name,
                          Drawing.LAYERS[i].colorNumber,
                          Drawing.LAYERS[i].lineTypeName);
        }

        this.setActiveLayer('0');
    }


    /**
     * @param {string} name
     * @param {string} description
     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a
     */
    addLineType(name, description, elements)
    {
        this.lineTypes[name] = new LineType(name, description, elements);
        return this;
    }

    addLayer(name, colorNumber, lineTypeName)
    {
        this.layers[name] = new Layer(name, colorNumber, lineTypeName);
        return this;
    }

    setActiveLayer(name)
    {
        this.activeLayer = this.layers[name];
        return this;
    }

    drawLine(x1, y1, x2, y2)
    {
        this.activeLayer.addShape(new Line(x1, y1, x2, y2));
        return this;
    }

    drawPoint(x, y)
    {
        this.activeLayer.addShape(new Point(x, y));
        return this;
    }

    drawRect(x1, y1, x2, y2)
    {
        this.activeLayer.addShape(new Line(x1, y1, x2, y1));
        this.activeLayer.addShape(new Line(x1, y2, x2, y2));
        this.activeLayer.addShape(new Line(x1, y1, x1, y2));
        this.activeLayer.addShape(new Line(x2, y1, x2, y2));
        return this;
    }

    drawRectClosed(x1, y1, x2, y2)
    {
        const rect = new Rectangle(x1, y1, x2, y2);
        this.activeLayer.addShape(new Polyline(rect.getCornersPoints(), true, 0, 0));
        return this;
    }

    /**
     * @param {number} x1 - Center x
     * @param {number} y1 - Center y
     * @param {number} r - radius
     * @param {number} startAngle - degree
     * @param {number} endAngle - degree
     */
    drawArc(x1, y1, r, startAngle, endAngle)
    {
        this.activeLayer.addShape(new Arc(x1, y1, r, startAngle, endAngle));
        return this;
    }

    /**
     * @param {number} x1 - Center x
     * @param {number} y1 - Center y
     * @param {number} r - radius
     */
    drawCircle(x1, y1, r)
    {
        this.activeLayer.addShape(new Circle(x1, y1, r));
        return this;
    }

    /**
     * @param {number} x1 - x
     * @param {number} y1 - y
     * @param {number} height - Text height
     * @param {number} rotation - Text rotation
     * @param {string} value - the string itself
     * @param {string} [horizontalAlignment="left"] left | center | right
     * @param {string} [verticalAlignment="baseline"] baseline | bottom | middle | top
     */
    drawText(x1, y1, height, rotation, value, horizontalAlignment = 'left', verticalAlignment = 'baseline')
    {
        this.activeLayer.addShape(new Text(x1, y1, height, rotation, value, horizontalAlignment, verticalAlignment));
        return this;
    }

    /**
     * @param {array} points - Array of points like [ [x1, y1], [x2, y2]... ]
     * @param {boolean} closed - Closed polyline flag
     * @param {number} startWidth - Default start width
     * @param {number} endWidth - Default end width
     */
    drawPolyline(points, closed = false, startWidth = 0, endWidth = 0)
    {
        this.activeLayer.addShape(new Polyline(points, closed, startWidth, endWidth));
        return this;
    }

    /**
     * @param {array} points - Array of points like [ [x1, y1, z1], [x2, y2, z1]... ]
     */
    drawPolyline3d(points)
    {
        points.forEach(point => {
            if (point.length !== 3){
                throw "Require 3D coordinate"
            }
        });
        this.activeLayer.addShape(new Polyline3d(points));
        return this;
    }

    /**
     *
     * @param {number} trueColor - Integer representing the true color, can be passed as an hexadecimal value of the form 0xRRGGBB
     */
    setTrueColor(trueColor)
    {
        this.activeLayer.setTrueColor(trueColor);
        return this;
    }

    /**
     * @param {number} x1 - x
     * @param {number} y1 - y
     * @param {number} z1 - z
     * @param {number} x2 - x
     * @param {number} y2 - y
     * @param {number} z2 - z
     * @param {number} x3 - x
     * @param {number} y3 - y
     * @param {number} z3 - z
     * @param {number} x4 - x
     * @param {number} y4 - y
     * @param {number} z4 - z
     */
    drawFace(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)
    {
        this.activeLayer.addShape(new Face(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4));
        return this;
    }


    _getDxfLtypeTableRows()
    {
        const output = []
        output.push(new Row('0', 'TABLE'))
        output.push(new Row('2', 'LTYPE'))
        output.push(new Row('5', handleSeed()))
        output.push(new Row('330', '0'))
        output.push(new Row('100', 'AcDbSymbolTable'))
        output.push(new Row('70', '48'))
        // let s = '0\nTABLE\n'; //start table
        // s += '2\nLTYPE\n';    //name table as LTYPE table
        for (let lineTypeName in this.lineTypes)
        {
            //s += this.lineTypes[lineTypeName].toDxfString();
            output.push(...this.lineTypes[lineTypeName].toDxfRows())
        }

        // s += '0\nENDTAB\n'; //end table

        // return s;
        output.push(new Row('0', 'ENDTAB'))
        return output
    }

    /**
     * @deprecated
     */
    _getDxfLayerTable()
    {
        // let s = '0\nTABLE\n'; //start table
        // s += '2\nLAYER\n'; //name table as LAYER table

        // for (let layerName in this.layers)
        // {
        //     s += this.layers[layerName].toDxfString();
        // }

        // s += '0\nENDTAB\n';

        // return s;
    }

    /**
     * Auto generated
     * @deprecated
     */
    header(variable, values) {
        // this.headers[variable] = values;
        // return this;
    }

    /**
     *
     * @deprecated
     */
    _getHeader(variable, values){
        // let s = '9\n$'+ variable +'\n';

        // for (let value of values) {
        //     s += `${value[0]}\n${value[1]}\n`;
        // }

        // return s;
    }

    /**
     *
     * @param {string} unit see Drawing.UNITS
     */
    setUnits(unit) {
        this.unit = Drawing.UNITS[unit]
    }

    toDxfString()
    {
        // ToDo: Consider converting all Entity output to Row items

        //ENTITES section
        let s =''
        s += '0\nSECTION\n';
        s += '2\nENTITIES\n';

        for (let layerName in this.layers)
        {
            let layer = this.layers[layerName];
            s += layer.shapesToDxf();
            // let shapes = layer.getShapes();
        }

        s += '0\nENDSEC\n';


        //close file
        s += '0\nEOF';

        const headerOutputAsRowItems = HEADER.generateHeaderAndDefaults(this.layers, this.unit, this._getDxfLtypeTableRows())
        const headerString = H.generateStringFromRows(headerOutputAsRowItems)

        return headerString + s
    }

}

//AutoCAD Color Index (ACI)
//http://sub-atomic.com/~moses/acadcolors.html
Drawing.ACI =
{
    LAYER : 0,
    RED : 1,
    YELLOW : 2,
    GREEN : 3,
    CYAN : 4,
    BLUE : 5,
    MAGENTA : 6,
    WHITE : 7
}

Drawing.LINE_TYPES =
[
    {name: 'CONTINUOUS', description: '______', elements: []},
    {name: 'DASHED',    description: '_ _ _ ', elements: [5.0, -5.0]},
    {name: 'DOTTED',    description: '. . . ', elements: [0.0, -5.0]},
    {name: 'BORDER',    description: '__ __ . __ __ . __ __', elements: [5.0, -2.5, 5.0, -2.5, 0, -2.5]},
    {name: 'CENTER',    description: '____ _ ____ _ ____', elements: [5.0, -2.5, 2.5, -2.5]}
]

Drawing.LAYERS =
[
    {name: '0',  colorNumber: Drawing.ACI.WHITE, lineTypeName: 'CONTINUOUS'}
]

//https://www.autodesk.com/techpubs/autocad/acad2000/dxf/header_section_group_codes_dxf_02.htm
Drawing.UNITS = {
    'Unitless':0,
    'Inches':1,
    'Feet':2,
    'Miles':3,
    'Millimeters':4,
    'Centimeters':5,
    'Meters':6,
    'Kilometers':7,
    'Microinches':8,
    'Mils':9,
    'Yards':10,
    'Angstroms':11,
    'Nanometers':12,
    'Microns':13,
    'Decimeters':14,
    'Decameters':15,
    'Hectometers':16,
    'Gigameters':17,
    'Astronomical units':18,
    'Light years':19,
    'Parsecs':20
}

module.exports = Drawing;

},{"./Arc":16,"./Circle":17,"./Face":22,"./Header":23,"./Helpers":24,"./Layer":25,"./Line":26,"./LineType":27,"./Point":28,"./Polyline":29,"./Polyline3d":30,"./Rectangle":31,"./Row":32,"./Text":33,"./handleSeed.js":34}]},{},[]);
